<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<sequence basedir="." >

    <property name="instance_selector"          value="./environment//instance"/>
    <property name="instance_exists_criteria"   value="exists(@instance-id)"/>
    <property name="instance_eligible_criteria" value="not(empty(melody:getHeritedContent(., '/tags/tag[@name=&quot;OS&quot; and @value=&quot;linux&quot;]'))) and melody:getNetworkActivationHost(.)!=''"/>
    <property name="instance_match_criteria"    value="1=1"/>

    <property name="channel_selector"           value="/rhn-channels/channel"/>
    <property name="channel_match_criteria"     value="1=1"/>

    <order name="rhn_register" >
        <echo message="Registering servers on RHN ..." />

        <property name="RHN_ACTIVATIONKEY" value="§[./environment/rhn/activationkey/text()]§" />
        <property name="RHN_SERVERIP" value="§[./environment/rhn/serverip/text()]§" />
        <property name="RHN_LOGIN" value="§[./environment/rhn/login/text()]§" />
        <property name="RHN_PASSWORD" value="§[./environment/rhn/password/text()]§" />

        <foreach    items="§[instance_selector]§[ §[instance_exists_criteria]§ and §[instance_eligible_criteria]§ and §[instance_match_criteria]§ ]"
                    item-name="srv" >
            <property name="ip" value="§[ melody:getNetworkActivationHost(§[srv]§) ]§" />
            <property name="kp" value="§[ melody:getInstanceKeyPairName(§[srv]§) ]§" />

            <property name="hwinfos" value="§[ melody:getHeritedContent(§[srv]§, '/rhn/@upload-hardware-infos') ]§" />
            <property name="hwinfos" value="§[if ('§[hwinfos]§'!='true') then '--nohardware' else '']§" />
            <property name="pkginfos" value="§[ melody:getHeritedContent(§[srv]§, '/rhn/@upload-packages-infos') ]§" />
            <property name="pkginfos" value="§[if ('§[pkginfos]§'!='true') then '--nopackages' else '']§" />
            <property name="virtinfos" value="§[ melody:getHeritedContent(§[srv]§, '/rhn/@upload-virtualization-infos') ]§" />
            <property name="virtinfos" value="§[if ('§[virtinfos]§'!='true') then '--novirtinfo' else '']§" />
            <property name="rhnsd" value="§[ melody:getHeritedContent(§[srv]§, '/rhn/@start-rhnsd') ]§" />
            <property name="rhnsd" value="§[if ('§[rhnsd]§'!='true') then '--norhnsd' else '']§" />

            <!-- TODO : should try 3 times if 'Error communicating with server. The message was:No address associated with hostname' -->
            <!-- TODO : should try 3 times if 'Error communicating with server. The message was:Temporary failure in name resolution' -->
            <ssh description="[rhn_reg:§[ip]§]" host="§[ip]§" login="root" keypair-name="§[kp]§" >
                <exec>
                    <![CDATA[
[ -f /etc/sysconfig/rhn/systemid ] && {
  echo "System already registered in RHN. Nothing to do."
  exit 0
}

declare registered=0
declare retry=3
declare res
while [ ${registered} = 0 -a ${retry} -ge 0 ]; do
  res=$(rhnreg_ks --activationkey=§[RHN_ACTIVATIONKEY]§ --force §[hwinfos]§ §[pkginfos]§ §[virtinfos]§ §[rhnsd]§ 2>&1)
  [ $? = 0 ] && registered=1
  [ $registered = 1 ] && { echo $res; break; }
  echo $res 1>&2
  echo $res | \
    grep -v "Error communicating with server" | \
    grep -v "No address associated with hostname" | \
    grep -v "Temporary failure in name resolution" | \
    grep -v "Unable to connect to the host and port specified" | \
    grep -i "error" 1>/dev/null && break
  echo "Fail to register system '§[ip]§' in RHN. ${retry} try left." 1>&2
  [ $retry -le 0 ] && break
  retry=$((retry-1))
  sleep $(((3-retry)*4))
done
[ $registered = 0 ] && { echo "Fail to register system '§[ip]§' in RHN. Exiting with error code 1." 1>&2; exit 1; }
echo "System '§[ip]§' successfully registered in RHN."
                    ]]>
                </exec>
            </ssh>

            <!-- set the base channel, if any (should be only one) -->
            <foreach    items="melody:getHeritedContent(§[srv]§, '§[channel_selector]§[ @base-channel=&quot;true&quot; ]')"
                        item-name="channel" >
                <property name="channel_name" value="§[§[channel]§/@name]§" />

                <ssh description="[rhn-channel:§[channel_name]§:§[ip]§]" host="§[ip]§" login="root" keypair-name="§[kp]§" >
                    <exec command="[ ! -r /etc/sysconfig/rhn/systemid ] &amp;&amp; { echo system is not registered; exit 0; } " />
                    <declare name="SYSTEM_ID" value="$(cat /etc/sysconfig/rhn/systemid | grep -E &quot;&lt;value&gt;&lt;string&gt;ID-.*&lt;/string&gt;&lt;/value&gt;&quot; | cut -d '&gt;' -f3 | cut -d '&lt;' -f1 | cut -d '-' -f2)"/>
                    <exec command="python &lt;&lt; EOF" />
                    <exec command="import xmlrpclib" />
                    <exec command="import sys" />

                    <exec command="client = xmlrpclib.Server(&quot;https://§[RHN_SERVERIP]§/rpc/api&quot;, verbose=0)" />
                    <exec command="key = client.auth.login(&quot;§[RHN_LOGIN]§&quot;, &quot;§[RHN_PASSWORD]§&quot;)" />

                    <exec command="allchans = client.system.listBaseChannels(key, int($SYSTEM_ID));" />
                    <exec command="for chan in allchans:" />
                    <exec command="  if chan['LABEL'] == &quot;§[channel_name]§&quot;:" />
                    <exec command="    if chan['CURRENT_BASE'] == 1:" />
                    <exec command="      print &quot;'§[channel_name]§' is already the base channel.&quot;" />
                    <exec command="      client.auth.logout(key);" />
                    <exec command="      exit(0)" />
                    <exec command="    print &quot;Setting '§[channel_name]§' as base channel ...&quot;" />
                    <exec command="    client.system.setBaseChannel(key, int($SYSTEM_ID), chan['ID']);" />
                    <exec command="    print &quot;'§[channel_name]§' successfully set as base channel.&quot;" />
                    <exec command="    client.auth.logout(key);" />
                    <exec command="    exit(0)" />
                    <exec command="print &quot;'§[channel_name]§' is not available.&quot;" />
                    <exec command="client.auth.logout(key)" />
                    <exec command="exit(23)" />
                    <exec command="EOF" />

                    <exec command="res=$?; [ $res = 0 ] || exit $res" />
                </ssh>
                <echo message="+ Server '§[§[srv]§/@instance-id]§' subscribed to RHN Base Channel '§[channel_name]§'." />
            </foreach>

            <!-- set each child channel, if any (should be none or many) -->
            <foreach    items="melody:getHeritedContent(§[srv]§, '§[channel_selector]§[ (not(exists(@base-channel)) or @base-channel!=&quot;true&quot;) and §[channel_match_criteria]§ ]')"
                        item-name="channel" >
                <property name="channel_name" value="§[§[channel]§/@name]§" />

                <ssh description="[rhn-channel:§[channel_name]§:§[ip]§]" host="§[ip]§" login="root" keypair-name="§[kp]§" >
                    <exec>
                        <![CDATA[
rhn-channel -l | grep §[channel_name]§ 1>/dev/null && {
  echo "Child channel '§[channel_name]§' is already registered for system '§[ip]§'. Nothing to do."
  exit 0
}

declare registered=0
declare retry=3
declare res
while [ ${registered} = 0 -a ${retry} -ge 0 ]; do
  res=$(rhn-channel -a -c §[channel_name]§ -u §[RHN_LOGIN]§ -p "§[RHN_PASSWORD]§" 2>&1)
  [ $? = 0 ] && registered=1
  [ $registered = 1 ] && { echo $res; break; }
  echo $res 1>&2
  echo $res | \
    grep -v "No address associated with hostname" | \
    grep -v "Temporary failure in name resolution" | \
    grep -v "Unable to connect to the host and port specified" | \
    grep -i "error" 1>/dev/null && break
  echo "Fail to register child channel '§[channel_name]§' for system '§[ip]§'. ${retry} try left." 1>&2
  [ $retry -le 0 ] && break
  retry=$((retry-1))
  sleep $(((3-retry)*4))
done
[ $registered = 0 ] && { echo "Fail to register child channel '§[channel_name]§' for system '§[ip]§'. Exiting with error code 1." 1>&2; exit 1; }
echo "Child channel '§[channel_name]§' successfully registered for system '§[ip]§'."
                        ]]>
                    </exec>
                </ssh>
                <echo message="+ Server '§[§[srv]§/@instance-id]§' additionnally subscribed to RHN Channel '§[channel_name]§'." />
            </foreach>

            <echo message="+ Server '§[§[srv]§/@instance-id]§' successfully registered in RHN." />
        </foreach>

        <echo message="-- Servers successfully registered on RHN." />
    </order>

    <order name="rhn_unregister" >
        <echo message="Unregistering servers on RHN ..." />

        <property name="RHN_SERVERIP" value="§[./environment/rhn/serverip/text()]§" />
        <property name="RHN_LOGIN" value="§[./environment/rhn/login/text()]§" />
        <property name="RHN_PASSWORD" value="§[./environment/rhn/password/text()]§" />

        <foreach    items="§[instance_selector]§[ §[instance_exists_criteria]§ and §[instance_eligible_criteria]§ and §[instance_match_criteria]§ ]"
                    item-name="srv" >
            <property name="ip" value="§[ melody:getNetworkActivationHost(§[srv]§) ]§" />
            <property name="kp" value="§[ melody:getInstanceKeyPairName(§[srv]§) ]§" />

            <ssh description="[rhn_unreg:§[ip]§]" host="§[ip]§" login="root" keypair-name="§[kp]§" >
                <exec command="[ ! -r /etc/sysconfig/rhn/systemid ] &amp;&amp; { echo system is not registered; exit 0; } " />
                <declare name="SYSTEM_ID" value="$(cat /etc/sysconfig/rhn/systemid | grep -E &quot;&lt;value&gt;&lt;string&gt;ID-.*&lt;/string&gt;&lt;/value&gt;&quot; | cut -d '&gt;' -f3 | cut -d '&lt;' -f1 | cut -d '-' -f2)"/>
                <exec command="python &lt;&lt; EOF" />
                <exec command="import xmlrpclib" />
                <exec command="import sys" />

                <exec command="client = xmlrpclib.Server(&quot;https://§[RHN_SERVERIP]§/rpc/api&quot;, verbose=0)" />
                <exec command="key = client.auth.login(&quot;§[RHN_LOGIN]§&quot;, &quot;§[RHN_PASSWORD]§&quot;)" />

                <!-- try to delete the system, and, if it not exists, exit cleanly -->
                <exec command="try:" />
                <exec command="  client.system.deleteSystems(key,int($SYSTEM_ID))" />
                <exec command="except xmlrpclib.Fault, e:" />
                <exec command="  print &quot;Didn't delete the system because %s&quot; % e" />
                <exec command="client.auth.logout(key)" />
                <exec command="EOF" />

                <exec command="res=$?; [ $res = 0 ] || exit $res" />
                <exec command="rm -vf /etc/sysconfig/rhn/systemid" />
            </ssh>

            <echo message="+ Server '§[§[srv]§/@instance-id]§' successfully unregistered in RHN." />
        </foreach>

        <echo message="-- Servers successfully unregistered on RHN." />
    </order>

</sequence>
