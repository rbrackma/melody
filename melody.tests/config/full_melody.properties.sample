######## license / author
# license : GPL
# author : Guillaume Cornet

####################################################
### CUSTOM CONFIGURATION DIRECTIVES

### 'rootFolderPath' is a custom configuration directive used to eliminate redundancy in folder declaration
rootFolderPath=<REPLACE ME WITH THE ABSOLUTE HOME DIR OF MELODY.SH>

####################################################
### MANDATORY CONFIGURATION DIRECTIVES

### The canonical class name of the Processor Manager
processorManagerCanonicalClassName=com.wat.melody.core.internal.ProcessorManager

### Folder where temporary files are stored
### 'UUID' is a special configuration directive automatically added by Melody,
### 'UUID' can be used to generate unique folder.
workingFolderPath=${rootFolderPath}/tmp/${UUID}/

### Specifies the maximum step amount which can be run simultaneously.
### Must be a positive integer; 0 means 'no limit'
maxSimultaneousStep=8

### When killing Melody, all running threads are killed too.
### 'hardKillTimeout' is the number of seconds Melody will wait for all threads to stop.
### After 'hardKillTimeout' seconds are elapsed, all running threads are killed.
### Must be a positive integer; 0 means 'infinite'
hardKillTimeout=60


####################################################
### LOG4J CONFIGURATION DIRECTIVES
### needed for log4j loading

### The path to the log4j configuration file (an xml file is required)
loggingConfigurationFile=${rootFolderPath}/config/full_log4j.xml
loggingVariablesToSubstitute=log4j.logFilePath,log4j.exceptionFilePath,log4j.aws.logFilePath,log4j.libvirt.logFilePath,log4j.defaultLoggingLevel

### File where logs are generated
log4j.logFilePath=${rootFolderPath}/logs/melody.log

### File where exceptions details are generated
log4j.exceptionFilePath=${rootFolderPath}/logs/melody_exception.log

### File where aws logs are generated
log4j.aws.logFilePath=${rootFolderPath}/logs/aws.log

### File where libvirt logs are generated
log4j.libvirt.logFilePath=${rootFolderPath}/logs/libvirt.log

### Log threshold
### Can be altered by Command Line Options -v and -q
### Accepted values : ALL; TRACE; DEBUG; INFO; WARN; ERROR; FATAL; OFF
log4j.defaultLoggingLevel=WARN


####################################################
### PLUGIN CONFIGURATION DIRECTIVES
### needed for Plug-In loading

### List Configuration Directives which will contains Task Java Classes
tasks.directives=tasks.standard,tasks.xml,tasks.ssh

### Standard Tasks Java Classes
tasks.standard=\
com.wat.melody.plugin.echo.Echo, \
com.wat.melody.plugin.sleep.Sleep, \
com.wat.melody.plugin.copy.Copy

### File-Mod Plug-In Tasks Java Classes
tasks.xml=\
com.wat.melody.plugin.xml.XmlElementsRemove, \
com.wat.melody.plugin.xml.XmlElementsInsertBefore, \
com.wat.melody.plugin.xml.XmlElementsAppend, \
com.wat.melody.plugin.xml.XmlAttributesSet, \
com.wat.melody.plugin.xml.XmlAttributesRemove

### Ssh Plug-In Tasks Java Classes
tasks.ssh=\
com.wat.melody.plugin.ssh.Ssh, \
com.wat.melody.plugin.ssh.Upload, \
com.wat.melody.plugin.ssh.Download

### Folder where Plug-In configuration are stored (used to eliminate redundancy in folder declaration)
pluginConfigurationFolderPath=${rootFolderPath}/config/plugin

### list all Plug-In Configuration Directive
### comma separated list
plugin.configuration.directives=ssh.plugin.configuration.filepath

# The path to the configuration file of the SSH SCP Plug-In
ssh.plugin.configuration.filepath=${pluginConfigurationFolderPath}/ssh/ssh.plugin.properties


####################################################
### CUSTOM XPATH FUNCTIONS CONFIGURATION DIRECTIVES
### needed for custom xpath functions resolution

### List Configuration Directives which will contains Custom XPath NameSpace
xpath.namespace.directives=xpath.namespace.standard

### Standard XPath NameSpaces
xpath.namespace.standard=xpath.namespace.melody

xpath.namespace.melody.uri=http://localhost/melody

### List Configuration Directives which will contains Custom XPath Function
xpath.function.directives=xpath.function.standard

### Standard XPath Functions
xpath.function.standard=\
xpath.function.getBaseDir, \
xpath.function.getSequenceDescriptorPath, \
xpath.function.getWorkingFolder, \
xpath.function.newTmpFile, \
xpath.function.getHeritedAttributeValue, \
xpath.function.getHeritedContent

xpath.function.getBaseDir.namespace.uri=${xpath.namespace.melody.uri}
xpath.function.getBaseDir.class=com.wat.melody.core.nativeplugin.sequence.xpathfunctions.GetBaseDir
xpath.function.getBaseDir.arity=0

xpath.function.getSequenceDescriptorPath.namespace.uri=${xpath.namespace.melody.uri}
xpath.function.getSequenceDescriptorPath.class=com.wat.melody.core.nativeplugin.sequence.xpathfunctions.GetSequenceDescriptorPath
xpath.function.getSequenceDescriptorPath.arity=0

xpath.function.getWorkingFolder.namespace.uri=${xpath.namespace.melody.uri}
xpath.function.getWorkingFolder.class=com.wat.melody.core.xpathfunctions.GetWorkingFolder
xpath.function.getWorkingFolder.arity=0

xpath.function.newTmpFile.namespace.uri=${xpath.namespace.melody.uri}
xpath.function.newTmpFile.class=com.wat.melody.core.xpathfunctions.NewTmpFile
xpath.function.newTmpFile.arity=0

xpath.function.getHeritedAttributeValue.namespace.uri=${xpath.namespace.melody.uri}
xpath.function.getHeritedAttributeValue.class=com.wat.melody.xpathextensions.GetHeritedAttribute
xpath.function.getHeritedAttributeValue.arity=2

xpath.function.getHeritedContent.namespace.uri=${xpath.namespace.melody.uri}
xpath.function.getHeritedContent.class=com.wat.melody.xpathextensions.GetHeritedContent
xpath.function.getHeritedContent.arity=2


####################################################
### OPTIONNAL CONFIGURATION DIRECTIVES
### Can be override by the command line options

### Path of the Resources Descriptor
### Can be override by Command Line Option -E <Resources Descriptor File Path>
#resourcesDescriptors=rd1
#rd1=${rootFolderPath}/input/default-resources-descriptor.xml

### Batch mode : when enabled, will answer yes to any questions without prompting
### Can be override by Command Line Option -b / -B
### Accepted values : false - disable; true - enable
#batchMode=true

### Preserve Temporary File mode : when enabled, will not delete any temporary files (useful for investigation)
### Can be override by Command Line Option -p / -P
### Accepted values : false - disable; true - enable
#preserveTemporaryFilesMode=false

### Run Dry mode : when enabled, will only check everything, instead of processing the sequence for real
### Can be override by Command Line Option -d / -D
### Accepted values : false - disable; true - enable
#runDryMode=true

### Path of the TarGz archive or Sequence Descriptor file
### Can be override by Command Line Option -f <Sequence Descriptor File Path>
#sequenceDescriptorFilePath=${rootFolderPath}/input/sequence.xml

### Path of the specific configuration
### Can be override by Command Line Option -C <Specific Configuration File Path>
#specificConfigurationFilePath=

### The orders to process
### Can be override by Command Line Option -o <Orders>
### Accepted values : one or more order specified in the sequence descriptor (see Command Line Argument <sequenceDescriptorFilePath>), separated by a comma.
#orders=

### The properties to pass to the process
### Can be override by Command Line Option -V <Property>
### Accepted values : a string of the form '<prop1>,<prop2>,<prop3>'. Then declare each property on a dedicated line (e.g. '<prop1>=<value1>')
#properties=

### The Resources Filters
### Can be override by Command Line Option -F <Filter>
### Accepted values : one or more XPath expression, separated by a comma.
#resourcesFilters=

### The Target Filters
### Can be override by Command Line Option -T <Filter>
### Accepted values : one or more XPath expression, separated by a comma.
#targetFilters=
