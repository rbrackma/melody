package com.wat.melody.cli;

import com.wat.melody.api.IProcessorListener;
import com.wat.melody.api.IProcessorManager;
import com.wat.melody.api.event.ProcessingFinishedEvent;
import com.wat.melody.api.event.ProcessingStartedEvent;
import com.wat.melody.api.event.RequestProcessingToPauseEvent;
import com.wat.melody.api.event.RequestProcessingToResumeEvent;
import com.wat.melody.api.event.RequestProcessingToStartEvent;
import com.wat.melody.api.event.RequestProcessingToStopEvent;
import com.wat.melody.api.event.TaskCreatedEvent;
import com.wat.melody.api.event.TaskFinishedEvent;
import com.wat.melody.api.event.TaskStartedEvent;

/**
 * <p>
 * Receive all events generated by a {@link IProcessorManager}.
 * </p>
 * <p>
 * Not that :
 * <ul>
 * <li>This default implementation don't do anything ;</li>
 * </ul>
 * </p>
 * 
 * @see {@link IProcessorManager}
 * 
 * @author Guillaume Cornet
 * 
 */
public class DefaultProcessingListener implements IProcessorListener {

	/**
	 * <p>
	 * Create a new {@link DefaultProcessingListener} object and made it
	 * listening the given {@link IProcessorManager}'s events.
	 * </p>
	 * 
	 * @param pm
	 *            is the {@link IProcessorManager} which will generate events.
	 * 
	 */
	public DefaultProcessingListener(IProcessorManager pm) {
		pm.addListener(this);
	}

	@Override
	public void processingStartRequested(RequestProcessingToStartEvent evt) {
	}

	@Override
	public void processingStopRequested(RequestProcessingToStopEvent evt) {
	}

	@Override
	public void processingPauseRequested(RequestProcessingToPauseEvent evt) {
	}

	@Override
	public void processingResumeRequested(RequestProcessingToResumeEvent evt) {
	}

	@Override
	public void processingStarted(ProcessingStartedEvent evt) {
	}

	@Override
	public void processingFinished(ProcessingFinishedEvent evt) {
	}

	@Override
	public void taskCreated(TaskCreatedEvent evt) {
	}

	@Override
	public void taskStarted(TaskStartedEvent evt) {
	}

	@Override
	public void taskFinished(TaskFinishedEvent evt) {
	}

}