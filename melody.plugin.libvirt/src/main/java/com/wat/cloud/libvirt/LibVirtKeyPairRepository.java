package com.wat.cloud.libvirt;

import java.io.IOException;
import java.security.KeyPair;
import java.util.HashMap;
import java.util.Map;

import org.libvirt.Connect;

import com.wat.cloud.libvirt.exception.LibVirtKeyPairRepositoryException;
import com.wat.melody.common.keypair.KeyPairName;
import com.wat.melody.common.keypair.KeyPairRepository;
import com.wat.melody.common.keypair.KeyPairRepositoryPath;
import com.wat.melody.common.keypair.KeyPairSize;
import com.wat.melody.common.keypair.exception.IllegalPassphraseException;

/**
 * <p>
 * A {@link LibVirtKeyPairRepository} helps to create, store and destroy
 * {@link KeyPair} on the local File System and in LibVirtCloud.
 * </p>
 * 
 * <p>
 * A {@link LibVirtKeyPairRepository} enhance the {@link KeyPairRepostory} by
 * providing Local KeyPair synchronization with LibVirtCloud KeyPairs.
 * </p>
 * 
 * <p>
 * A {@link LibVirtKeyPairRepository} is thread safe.
 * </p>
 * 
 * @author Guillaume Cornet
 * 
 */
public class LibVirtKeyPairRepository {

	private static Map<KeyPairRepositoryPath, LibVirtKeyPairRepository> REGISTERED_REPOS = new HashMap<KeyPairRepositoryPath, LibVirtKeyPairRepository>();

	public synchronized static LibVirtKeyPairRepository getLibVirtKeyPairRepository(
			Connect cnx, KeyPairRepositoryPath keyPairRepositoryPath) {
		if (keyPairRepositoryPath == null) {
			throw new IllegalArgumentException("null: Not accepted. "
					+ "Must be a valid "
					+ KeyPairRepositoryPath.class.getCanonicalName() + ".");
		}
		if (REGISTERED_REPOS.containsKey(keyPairRepositoryPath)) {
			return REGISTERED_REPOS.get(keyPairRepositoryPath);
		}
		LibVirtKeyPairRepository kpr = new LibVirtKeyPairRepository(cnx,
				keyPairRepositoryPath);
		REGISTERED_REPOS.put(keyPairRepositoryPath, kpr);
		return kpr;
	}

	private KeyPairRepository _kpr;
	private Connect _cnx;

	protected LibVirtKeyPairRepository(Connect cnx, KeyPairRepositoryPath kppr) {
		setConnection(cnx);
		setKeyPairRepository(KeyPairRepository.getKeyPairRepository(kppr));
	}

	public Connect getConnection() {
		return _cnx;
	}

	private Connect setConnection(Connect connection) {
		if (connection == null) {
			throw new IllegalArgumentException("null: Not accepted."
					+ "Must be a valid " + Connect.class.getCanonicalName()
					+ ".");
		}
		Connect previous = getConnection();
		_cnx = connection;
		return previous;
	}

	public KeyPairRepository getKeyPairRepository() {
		return _kpr;
	}

	private KeyPairRepository setKeyPairRepository(KeyPairRepository kpr) {
		if (kpr == null) {
			throw new IllegalArgumentException("null: Not accepted. "
					+ "Must be a valid "
					+ KeyPairRepository.class.getCanonicalName() + ".");
		}
		KeyPairRepository previous = getKeyPairRepository();
		_kpr = kpr;
		return previous;
	}

	public synchronized boolean containsKeyPair(KeyPairName keyPairName) {
		return getKeyPairRepository().containsKeyPair(keyPairName);
	}

	public synchronized KeyPair createKeyPair(KeyPairName keyPairName,
			KeyPairSize size, String passphrase)
			throws LibVirtKeyPairRepositoryException, IOException,
			IllegalPassphraseException {
		// Get/Create KeyPair in the underlying repository
		KeyPair kp = getKeyPairRepository().createKeyPair(keyPairName, size,
				passphrase);
		// Create/test KeyPair in LibVirtCloud
		createKeyPairInLibVirtCloud(keyPairName, kp);
		return kp;
	}

	public synchronized void destroyKeyPair(KeyPairName keyPairName) {
		// Delete KeyPair in LibVirtCloud
		LibVirtCloudKeyPair.deleteKeyPair(getConnection(), keyPairName);
		// Delete KeyPair in the underlying repository
		getKeyPairRepository().destroyKeyPair(keyPairName);
	}

	private synchronized void createKeyPairInLibVirtCloud(KeyPairName kpn,
			KeyPair kp) throws LibVirtKeyPairRepositoryException {
		if (LibVirtCloudKeyPair.keyPairExists(getConnection(), kpn)) {
			// when KeyPair is already in LibVirtCloud, verify the fingerprint
			String fprint = KeyPairRepository.getFingerprint(kp);
			if (LibVirtCloudKeyPair
					.compareKeyPair(getConnection(), kpn, fprint) == false) {
				throw new LibVirtKeyPairRepositoryException(Messages.bind(
						Messages.KeyPairEx_DIFFERENT, kpn,
						getKeyPairRepository().getKeyPairRepositoryPath()));
			}
		} else {
			// when KeyPair is not in LibVirtCloud, import the public key
			String pubkey = KeyPairRepository.getPublicKeyInOpenSshFormat(kp,
					"Generated by Melody");
			LibVirtCloudKeyPair.importKeyPair(getConnection(), kpn, pubkey);
		}
	}

}